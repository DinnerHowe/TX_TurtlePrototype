// Generated by gencpp from file skeleton_detection/SkeletonComplete.msg
// DO NOT EDIT!


#ifndef SKELETON_DETECTION_MESSAGE_SKELETONCOMPLETE_H
#define SKELETON_DETECTION_MESSAGE_SKELETONCOMPLETE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <skeleton_detection/skeleton_message.h>
#include <skeleton_detection/robot_message.h>
#include <geometry_msgs/Point.h>

namespace skeleton_detection
{
template <class ContainerAllocator>
struct SkeletonComplete_
{
  typedef SkeletonComplete_<ContainerAllocator> Type;

  SkeletonComplete_()
    : header()
    , uuid()
    , start_time()
    , end_time()
    , date()
    , time()
    , skeleton_data()
    , robot_data()
    , number_of_detections(0)
    , map_name()
    , current_topo_node()
    , human_map_point()  {
    }
  SkeletonComplete_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , uuid(_alloc)
    , start_time()
    , end_time()
    , date(_alloc)
    , time(_alloc)
    , skeleton_data(_alloc)
    , robot_data(_alloc)
    , number_of_detections(0)
    , map_name(_alloc)
    , current_topo_node(_alloc)
    , human_map_point(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _uuid_type;
  _uuid_type uuid;

   typedef ros::Time _start_time_type;
  _start_time_type start_time;

   typedef ros::Time _end_time_type;
  _end_time_type end_time;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _date_type;
  _date_type date;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _time_type;
  _time_type time;

   typedef std::vector< ::skeleton_detection::skeleton_message_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::skeleton_detection::skeleton_message_<ContainerAllocator> >::other >  _skeleton_data_type;
  _skeleton_data_type skeleton_data;

   typedef std::vector< ::skeleton_detection::robot_message_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::skeleton_detection::robot_message_<ContainerAllocator> >::other >  _robot_data_type;
  _robot_data_type robot_data;

   typedef int32_t _number_of_detections_type;
  _number_of_detections_type number_of_detections;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _map_name_type;
  _map_name_type map_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _current_topo_node_type;
  _current_topo_node_type current_topo_node;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _human_map_point_type;
  _human_map_point_type human_map_point;




  typedef boost::shared_ptr< ::skeleton_detection::SkeletonComplete_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::skeleton_detection::SkeletonComplete_<ContainerAllocator> const> ConstPtr;

}; // struct SkeletonComplete_

typedef ::skeleton_detection::SkeletonComplete_<std::allocator<void> > SkeletonComplete;

typedef boost::shared_ptr< ::skeleton_detection::SkeletonComplete > SkeletonCompletePtr;
typedef boost::shared_ptr< ::skeleton_detection::SkeletonComplete const> SkeletonCompleteConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::skeleton_detection::SkeletonComplete_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::skeleton_detection::SkeletonComplete_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace skeleton_detection

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'skeleton_detection': ['/home/howe/turtlebot_demo/src/skeleton_detection/skeleton_detection/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::skeleton_detection::SkeletonComplete_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::skeleton_detection::SkeletonComplete_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skeleton_detection::SkeletonComplete_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skeleton_detection::SkeletonComplete_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skeleton_detection::SkeletonComplete_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skeleton_detection::SkeletonComplete_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::skeleton_detection::SkeletonComplete_<ContainerAllocator> >
{
  static const char* value()
  {
    return "55e81f9352a265dde8174a2322ddecd9";
  }

  static const char* value(const ::skeleton_detection::SkeletonComplete_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x55e81f9352a265ddULL;
  static const uint64_t static_value2 = 0xe8174a2322ddecd9ULL;
};

template<class ContainerAllocator>
struct DataType< ::skeleton_detection::SkeletonComplete_<ContainerAllocator> >
{
  static const char* value()
  {
    return "skeleton_detection/SkeletonComplete";
  }

  static const char* value(const ::skeleton_detection::SkeletonComplete_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::skeleton_detection::SkeletonComplete_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
string uuid\n\
time start_time\n\
time end_time\n\
string date\n\
string time\n\
skeleton_detection/skeleton_message[] skeleton_data\n\
skeleton_detection/robot_message[] robot_data\n\
int32 number_of_detections\n\
string map_name\n\
string current_topo_node\n\
geometry_msgs/Point human_map_point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: skeleton_detection/skeleton_message\n\
Header header\n\
int32 userID\n\
string uuid\n\
skeleton_detection/joint_message[] joints\n\
time time\n\
\n\
================================================================================\n\
MSG: skeleton_detection/joint_message\n\
string name\n\
geometry_msgs/Pose pose\n\
float32 confidence\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: skeleton_detection/robot_message\n\
geometry_msgs/Pose robot_pose\n\
float32 PTU_pan\n\
float32 PTU_tilt\n\
";
  }

  static const char* value(const ::skeleton_detection::SkeletonComplete_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::skeleton_detection::SkeletonComplete_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.uuid);
      stream.next(m.start_time);
      stream.next(m.end_time);
      stream.next(m.date);
      stream.next(m.time);
      stream.next(m.skeleton_data);
      stream.next(m.robot_data);
      stream.next(m.number_of_detections);
      stream.next(m.map_name);
      stream.next(m.current_topo_node);
      stream.next(m.human_map_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SkeletonComplete_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::skeleton_detection::SkeletonComplete_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::skeleton_detection::SkeletonComplete_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "uuid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.uuid);
    s << indent << "start_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_time);
    s << indent << "end_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.end_time);
    s << indent << "date: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.date);
    s << indent << "time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.time);
    s << indent << "skeleton_data[]" << std::endl;
    for (size_t i = 0; i < v.skeleton_data.size(); ++i)
    {
      s << indent << "  skeleton_data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::skeleton_detection::skeleton_message_<ContainerAllocator> >::stream(s, indent + "    ", v.skeleton_data[i]);
    }
    s << indent << "robot_data[]" << std::endl;
    for (size_t i = 0; i < v.robot_data.size(); ++i)
    {
      s << indent << "  robot_data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::skeleton_detection::robot_message_<ContainerAllocator> >::stream(s, indent + "    ", v.robot_data[i]);
    }
    s << indent << "number_of_detections: ";
    Printer<int32_t>::stream(s, indent + "  ", v.number_of_detections);
    s << indent << "map_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.map_name);
    s << indent << "current_topo_node: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.current_topo_node);
    s << indent << "human_map_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.human_map_point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SKELETON_DETECTION_MESSAGE_SKELETONCOMPLETE_H
